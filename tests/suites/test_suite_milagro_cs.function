/* BEGIN_HEADER */
#include "mbedtls/milagro.h"
/* END_HEADER */

/*
 * BEGIN_DEPENDENCIES
 * depends_on:MBEDTLS_MILAGRO_CS_C
 * END_DEPENDENCIES
 */

/* BEGIN_CASE */
void milagro_cs_do( char *client_identity, char *client_secret, char *server_secret )
{
    /*
     * Initializate parameters
     */
    mbedtls_milagro_cs_context milagro_cs_client;
    mbedtls_milagro_cs_context milagro_cs_server;
    mbedtls_milagro_cs_init(&milagro_cs_client);
    mbedtls_milagro_cs_init(&milagro_cs_server);
    
    /*
     * Set external inputs
     */
    size_t len1, len2;
    unsigned char *cs_client_key = unhexify_alloc(client_secret,&len1);
    unsigned char *cs_server_key = unhexify_alloc(server_secret,&len2);
    
    mbedtls_milagro_cs_set_secret(&milagro_cs_client, (char*)cs_client_key, 2*PFS+1);
    mbedtls_milagro_cs_set_secret(&milagro_cs_server, (char*)cs_server_key, 4*PFS);
    mbedtls_milagro_cs_set_client_identity (&milagro_cs_client, client_identity);
    
    /*
     * Setup random generator (fake entropy)
     */
    
    char seed[32] = {0};
    octet SEED = {0,sizeof(seed),seed};
    SEED.len=32;
    for (int i=0;i<32;i++) SEED.val[i]=i+1;
    mbedtls_milagro_cs_create_csprng(&milagro_cs_client.RNG,&SEED);
    mbedtls_milagro_cs_create_csprng(&milagro_cs_server.RNG,&SEED);
    /*
     * Allocate memory and generation parameters from client's side
     */
    TEST_ASSERT( mbedtls_milagro_cs_alloc_memory(MBEDTLS_MILAGRO_IS_CLIENT, &milagro_cs_client) == 0);
    TEST_ASSERT( mbedtls_milagro_cs_alloc_memory(MBEDTLS_MILAGRO_IS_SERVER, &milagro_cs_server) == 0);
    /*
     * Exchange parameters
     */
    milagro_cs_server.hash_client_id.val = mbedtls_milagro_calloc(milagro_cs_client.hash_client_id.len);
    milagro_cs_server.U.val = mbedtls_milagro_calloc(milagro_cs_client.U.len);
    milagro_cs_server.V.val = mbedtls_milagro_calloc(milagro_cs_client.V.len);
    memcpy(milagro_cs_server.hash_client_id.val,milagro_cs_client.hash_client_id.val,milagro_cs_client.hash_client_id.len);
    memcpy(milagro_cs_server.U.val,milagro_cs_client.U.val,milagro_cs_client.U.len);
    memcpy(milagro_cs_server.V.val,milagro_cs_client.V.val,milagro_cs_client.V.len);
    milagro_cs_server.hash_client_id.len = milagro_cs_client.hash_client_id.len;
    milagro_cs_server.U.len = milagro_cs_client.U.len;
    milagro_cs_server.V.len = milagro_cs_client.V.len;
    milagro_cs_server.timevalue = milagro_cs_client.timevalue;
    
    /*
     * Client's authentication at server'side
     */
    TEST_ASSERT( mbedtls_milagro_cs_authenticate_client(&milagro_cs_server) == 0);
    
    /*
     * Compute public parameters
     */
    
    TEST_ASSERT( mbedtls_milagro_cs_get_g1_multiple(&milagro_cs_client.RNG,1,&milagro_cs_client.param_rand,
                                                    &milagro_cs_client.hash_client_id,&milagro_cs_client.R) == 0);
    TEST_ASSERT( mbedtls_milagro_cs_get_g1_multiple(&milagro_cs_server.RNG,0,&milagro_cs_server.param_rand,
                                                    &milagro_cs_server.HID,&milagro_cs_server.W) == 0);
    
    /*
     * Exchange public parameters
     */
    milagro_cs_client.W.val = mbedtls_milagro_calloc(milagro_cs_server.W.len);
    milagro_cs_client.W.len = milagro_cs_server.W.len;
    memcpy(milagro_cs_client.W.val, milagro_cs_server.W.val, milagro_cs_server.W.len);
    milagro_cs_server.R.val = mbedtls_milagro_calloc(milagro_cs_client.R.len);
    milagro_cs_server.R.len = milagro_cs_client.R.len;
    memcpy(milagro_cs_server.R.val, milagro_cs_client.R.val, milagro_cs_client.R.len);
    /*
     * Compute shared secret
     */
    TEST_ASSERT( mbedtls_milagro_cs_share_secret_srv(&milagro_cs_server) == 0);
    TEST_ASSERT( mbedtls_milagro_cs_share_secret_cli(&milagro_cs_client) == 0);
    TEST_ASSERT( strncmp(milagro_cs_server.shared_secret.val, milagro_cs_client.shared_secret.val, 
                 milagro_cs_client.shared_secret.len) == 0);
exit:
    mbedtls_free(cs_client_key); mbedtls_free(cs_server_key);
    mbedtls_milagro_cs_free( &milagro_cs_client );
    mbedtls_milagro_cs_free( &milagro_cs_server );
}
/* END_CASE */



/* BEGIN_CASE */
void milagro_cs_fail( char *client_identity, char *client_secret, char *server_secret )
{
    /*
     * Initializate parameters
     */
    mbedtls_milagro_cs_context milagro_cs_client;
    mbedtls_milagro_cs_context milagro_cs_server;
    mbedtls_milagro_cs_init(&milagro_cs_client);
    mbedtls_milagro_cs_init(&milagro_cs_server);
    
    /*
     * Set external inputs
     */
    size_t len1, len2;
    unsigned char *cs_client_key = unhexify_alloc(client_secret,&len1);
    unsigned char *cs_server_key = unhexify_alloc(server_secret,&len2);
    
    mbedtls_milagro_cs_set_secret(&milagro_cs_client, (char*)cs_client_key, 2*PFS+1);
    mbedtls_milagro_cs_set_secret(&milagro_cs_server, (char*)cs_server_key, 4*PFS);
    mbedtls_milagro_cs_set_client_identity (&milagro_cs_client, client_identity);
    
    /*
     * Setup random generator (fake entropy)
     */
    
    char seed[32] = {0};
    octet SEED = {0,sizeof(seed),seed};
    SEED.len=32;
    for (int i=0;i<32;i++) SEED.val[i]=i+1;
    mbedtls_milagro_cs_create_csprng(&milagro_cs_client.RNG,&SEED);
    mbedtls_milagro_cs_create_csprng(&milagro_cs_server.RNG,&SEED);
    /*
     * Allocate memory and generation parameters from client's side
     */
    TEST_ASSERT( mbedtls_milagro_cs_alloc_memory(MBEDTLS_MILAGRO_IS_CLIENT, &milagro_cs_client) == 0 );
    TEST_ASSERT( mbedtls_milagro_cs_alloc_memory(MBEDTLS_MILAGRO_IS_SERVER, &milagro_cs_server) == 0 );
    /*
     * Exchange parameters
     */
    milagro_cs_server.hash_client_id.val = mbedtls_milagro_calloc(milagro_cs_client.hash_client_id.len);
    milagro_cs_server.U.val = mbedtls_milagro_calloc(milagro_cs_client.U.len);
    milagro_cs_server.V.val = mbedtls_milagro_calloc(milagro_cs_client.V.len);
    memcpy(milagro_cs_server.hash_client_id.val,milagro_cs_client.hash_client_id.val,milagro_cs_client.hash_client_id.len);
    memcpy(milagro_cs_server.U.val,milagro_cs_client.U.val,milagro_cs_client.U.len);
    memcpy(milagro_cs_server.V.val,milagro_cs_client.V.val,milagro_cs_client.V.len);
    milagro_cs_server.hash_client_id.len = milagro_cs_client.hash_client_id.len;
    milagro_cs_server.U.len = milagro_cs_client.U.len;
    milagro_cs_server.V.len = milagro_cs_client.V.len;
    milagro_cs_server.timevalue = milagro_cs_client.timevalue;
    
    /*
     * Client's authentication at server'side
     */
    TEST_ASSERT( mbedtls_milagro_cs_authenticate_client(&milagro_cs_server) == MBEDTLS_ERR_MILAGRO_CS_AUTHENTICATION_FAILED );
    
exit:
    mbedtls_free(cs_client_key); mbedtls_free(cs_server_key);
    mbedtls_milagro_cs_free( &milagro_cs_client );
    mbedtls_milagro_cs_free( &milagro_cs_server );
}

/* END_CASE */
